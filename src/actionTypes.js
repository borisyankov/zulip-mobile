/* @flow */
// import type { Narrow, ServerSettings, User } from './types';

export type Action = any;

export type Actions = any; /* {
  appOnline: (isOnline: boolean) => Action,
  addToOutbox: (
    type: 'private' | 'stream',
    to: string | string[],
    subject: string,
    content: string,
  ) => Action,
  sessionState: (isActive: boolean) => Action,
  appOrientation: (orientation: string) => Action,
  sendFocusPing: (hasFocus: boolean, newUserInput: boolean) => Action,
  initUsers: (users: User[]) => Action,
  fetchUsers: () => Action,
  initialFetchComplete: () => Action,
  fetchEssentialInitialData: () => Action,
  fetchRestOfInitialData: (pushToken: string) => Action,
  deleteTokenPush: () => Action,
  deleteOutboxMessage: () => Action,
  saveTokenPush: (pushToken: string, result: string, msg: string) => Action,
  fetchEvents: () => Action,
  initNotifications: () => Action,
  switchAccount: (index: number) => Action,
  realmAdd: (realm: string) => Action,
  removeAccount: (index: number) => Action,
  loginSuccess: (realm: string, email: string, apiKey: string) => Action,
  logout: () => Action,
  initStreams: (streams: any[]) => Action,
  fetchStreams: () => Action,
  cancelEditMessage: () => void,
  startEditMessage: (messageId: number) => void,
  resetNavigation: () => Action,
  navigateBack: () => Action,
  navigateToAllStreams: () => Action,
  navigateToUsersScreen: () => Action,
  navigateToSearch: () => Action,
  navigateToSettings: () => Action,
  navigateToAuth: (serverSettings: ServerSettings) => Action,
  navigateToAccountPicker: () => Action,
  navigateToAccountDetails: (email: string) => Action,
  navigateToGroupDetails: (recipients: User) => Action,
  navigateToAddNewAccount: () => Action,
  navigateToLightbox: (realm: string) => Action,
  navigateToCreateGroup: () => Action,
  navigateToDiagnostics: () => Action,
  switchNarrow: (narrow: Narrow) => Action,
  doNarrow: (newNarrow: Narrow, anchor?: number) => Action,
  messageFetchStart: (narrow: Narrow, fetching: Object) => Action,
  messageFetchComplete: (
    messages: any[],
    narrow: Narrow,
    numBefore: number,
    numAfter: number,
  ) => Action,
  backgroundFetchMessages: (
    anchor: number,
    numBefore: number,
    numAfter: number,
    narrow: Narrow,
    useFirstUnread: boolean,
  ) => Action,
  fetchMessages: (
    anchor: number,
    numBefore: number,
    numAfter: number,
    narrow: Narrow,
    useFirstUnread: boolean,
  ) => Action,
  fetchMessagesAtFirstUnread: (narrow: Narrow) => Action,
  markMessagesRead: (messageIds: number[]) => Action,
  fetchOlder: () => Action,
  fetchNewer: () => Action,
}; */
